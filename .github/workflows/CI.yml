name: CI Pipeline
on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - '.github/workflows/*'
      - 'README.md'

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Get repository code
        uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('req.txt') }}

      - name: Install linter
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Lint the project
        run: flake8

  build-and-test:
    runs-on: ubuntu-22.04
    needs: lint
    steps:
      - name: Get repository code
        uses: actions/checkout@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: |
            /var/lib/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('Dockerfile') }}-${{ hashFiles('docker-compose.yml') }}

      - name: Set up Docker Compose
        run: |
          sudo apt -yqq install docker-compose
          docker-compose --version

      - name: Set up environment variables
        run: |
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "key_arn=${{ secrets.key_arn }}" >> .env
          
          echo "CELERY_TASK_TRACK_STARTED=${{ secrets.CELERY_TASK_TRACK_STARTED }}" >> .env
          
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "EMAIL_ADMIN=${{ secrets.EMAIL_ADMIN }}" >> .env
          
          echo "NGINX_EXTERNAL_PORT=${{ secrets.NGINX_EXTERNAL_PORT }}" >> .env
          
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env

      - name: Build and run tests
        run: |
          docker-compose up -d --build
          docker-compose exec --tty lil_bro_app python manage.py test
